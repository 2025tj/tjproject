spring:
  application:
    name: tjp

  datasource:
    # PostgreSQL
     url: ${DB_URL}
     driver-class-name: org.postgresql.Driver
     username: ${DB_USERNAME}
     password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update  # ?? ??? create ?? update, ?? ??? none
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect  # PostgreSQLDialect? ??? ?
    properties:
      hibernate:
        format_sql: true

  jackson:
    time-zone: Asia/Seoul
    serialization:
      fail-on-empty-beans: false

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher  # Spring Boot 3 ???? ?? ??? ??

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/oauth2/login/{registrationId}"
            scope:
              - email
              - profile

  mail:
    host: smtp.gmail.com
    port: 587 # 587(TLS), 465(SSL)
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

server:
  port: 8080

logging:
  level:
    org.hibernate.SQL: debug                     # ?? SQL ?? ??
    org.hibernate.type.descriptor.sql.BasicBinder: trace  # ???? ?????? ???
    com.tj.tjp: DEBUG
    org.springframework.security: DEBUG

frontend:
  redirect-urls:
    emailVerification: ${FRONTEND_BASE_URL}/email/verify
    signup: ${FRONTEND_BASE_URL}/signup
    oauth2-login: ${FRONTEND_BASE_URL}/
#    oauth2-link-complete: ${FRONTEND_BASE_URL}/oauth2/link-complete?provider={provider}
    oauth2-link-complete: ${FRONTEND_BASE_URL}/mypage
    oauth2-link: ${FRONTEND_BASE_URL}/oauth2/link/{registrationId}
    oauth2-signup: ${FRONTEND_BASE_URL}/oauth2/signup/{registrationId}
  allowed-origins:
    - ${FRONTEND_BASE_URL}

app:
  jwt:
    # 토큰 서명에 사용할 비밀 키
    secret: ${JWT_SECRET_KEY}
    # AccessToken 유효기간 (밀리초 단위)
    access-token-ttl: 600000        # 10분
    # RefreshToken 유효기간 (밀리초 단위)
    refresh-token-ttl: 604800000    # 7일
    # 토큰 발급자(issuer)
    issuer: tjp-backend
    # (선택) 필터 전략: header, cookie, hybrid 중 하나
    strategy: header

  one-time-jwt:
    # 일회용 링크 토큰 전용 시크릿 키 (액세스·리프레시와는 별도)
    secret: ${ONE_TIME_JWT_SECRET_KEY}
    # 일회용 링크 토큰 만료 시간(분 단위)
    expiry-minutes: 10

  auth:
    verification-grace-minutes: 10080